/*Generated by WaveMaker Studio*/
package com.alltypeservsforservdefs_9_0_0_1.classicmodels;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ForeignKey;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CascadeType;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

/**
 * Products generated by WaveMaker Studio.
 */
@Entity
@Table(name = "`products`")
public class Products implements Serializable {

    private String productCode;
    private String productName;
    private String productLine;
    private String productScale;
    private String productVendor;
    private String productDescription;
    private short quantityInStock;
    private BigDecimal buyPrice;
    private BigDecimal msrp;
    private Productlines productlinesByProductLine;
    private Productlines productlinesByProductLineRelation;
    private List<Orderdetails> orderdetailsesForProductCode;
    private List<Orderdetails> orderdetailsesForProductCodeRelation;

    @Id
    @Column(name = "`productCode`", nullable = false, length = 15)
    public String getProductCode() {
        return this.productCode;
    }

    public void setProductCode(String productCode) {
        this.productCode = productCode;
    }

    @Column(name = "`productName`", nullable = false, length = 70)
    public String getProductName() {
        return this.productName;
    }

    public void setProductName(String productName) {
        this.productName = productName;
    }

    @Column(name = "`productLine`", nullable = false, length = 50)
    public String getProductLine() {
        return this.productLine;
    }

    public void setProductLine(String productLine) {
        this.productLine = productLine;
    }

    @Column(name = "`productScale`", nullable = false, length = 10)
    public String getProductScale() {
        return this.productScale;
    }

    public void setProductScale(String productScale) {
        this.productScale = productScale;
    }

    @Column(name = "`productVendor`", nullable = false, length = 50)
    public String getProductVendor() {
        return this.productVendor;
    }

    public void setProductVendor(String productVendor) {
        this.productVendor = productVendor;
    }

    @Column(name = "`productDescription`", nullable = true, length = 2147483647)
    public String getProductDescription() {
        return this.productDescription;
    }

    public void setProductDescription(String productDescription) {
        this.productDescription = productDescription;
    }

    @Column(name = "`quantityInStock`", nullable = false, scale = 0, precision = 5)
    public short getQuantityInStock() {
        return this.quantityInStock;
    }

    public void setQuantityInStock(short quantityInStock) {
        this.quantityInStock = quantityInStock;
    }

    @Column(name = "`buyPrice`", nullable = false, scale = 9, precision = 22)
    public BigDecimal getBuyPrice() {
        return this.buyPrice;
    }

    public void setBuyPrice(BigDecimal buyPrice) {
        this.buyPrice = buyPrice;
    }

    @Column(name = "`MSRP`", nullable = false, scale = 9, precision = 22)
    public BigDecimal getMsrp() {
        return this.msrp;
    }

    public void setMsrp(BigDecimal msrp) {
        this.msrp = msrp;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`productLine`", referencedColumnName = "`productLine`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`products_ibfk_1`"))
    @Fetch(FetchMode.JOIN)
    public Productlines getProductlinesByProductLine() {
        return this.productlinesByProductLine;
    }

    public void setProductlinesByProductLine(Productlines productlinesByProductLine) {
        if(productlinesByProductLine != null) {
            this.productLine = productlinesByProductLine.getProductLine();
        }

        this.productlinesByProductLine = productlinesByProductLine;
    }

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "`productLine`", referencedColumnName = "`productLine`", insertable = false, updatable = false, foreignKey = @ForeignKey(name = "`FKkr1ka4825eweis793i7hutwo3`"))
    @Fetch(FetchMode.JOIN)
    public Productlines getProductlinesByProductLineRelation() {
        return this.productlinesByProductLineRelation;
    }

    public void setProductlinesByProductLineRelation(Productlines productlinesByProductLineRelation) {
        if(productlinesByProductLineRelation != null) {
            this.productLine = productlinesByProductLineRelation.getProductLine();
        }

        this.productlinesByProductLineRelation = productlinesByProductLineRelation;
    }
    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "productsByProductCode")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<Orderdetails> getOrderdetailsesForProductCode() {
        return this.orderdetailsesForProductCode;
    }

    public void setOrderdetailsesForProductCode(List<Orderdetails> orderdetailsesForProductCode) {
        this.orderdetailsesForProductCode = orderdetailsesForProductCode;
    }

    @JsonInclude(Include.NON_EMPTY)
    @OneToMany(fetch = FetchType.LAZY, mappedBy = "productsByProductCodeRelation")
    @Cascade({CascadeType.SAVE_UPDATE, CascadeType.REMOVE})
    public List<Orderdetails> getOrderdetailsesForProductCodeRelation() {
        return this.orderdetailsesForProductCodeRelation;
    }

    public void setOrderdetailsesForProductCodeRelation(List<Orderdetails> orderdetailsesForProductCodeRelation) {
        this.orderdetailsesForProductCodeRelation = orderdetailsesForProductCodeRelation;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Products)) return false;
        final Products products = (Products) o;
        return Objects.equals(getProductCode(), products.getProductCode());
    }

    @Override
    public int hashCode() {
        return Objects.hash(getProductCode());
    }
}