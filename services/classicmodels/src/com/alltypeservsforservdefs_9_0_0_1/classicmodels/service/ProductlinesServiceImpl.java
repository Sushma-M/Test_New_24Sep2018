/*Generated by WaveMaker Studio*/
package com.alltypeservsforservdefs_9_0_0_1.classicmodels.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.hibernate.Hibernate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.commons.MessageResource;
import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.alltypeservsforservdefs_9_0_0_1.classicmodels.Productlines;
import com.alltypeservsforservdefs_9_0_0_1.classicmodels.Products;


/**
 * ServiceImpl object for domain model class Productlines.
 *
 * @see Productlines
 */
@Service("classicmodels.ProductlinesService")
@Validated
public class ProductlinesServiceImpl implements ProductlinesService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProductlinesServiceImpl.class);

    @Lazy
    @Autowired
    @Qualifier("classicmodels.ProductsService")
    private ProductsService productsService;

    @Autowired
    @Qualifier("classicmodels.ProductlinesDao")
    private WMGenericDao<Productlines, String> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Productlines, String> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
    public Productlines create(Productlines productlines) {
        LOGGER.debug("Creating a new Productlines with information: {}", productlines);

        List<Products> productsesForProductLine = productlines.getProductsesForProductLine();
        List<Products> productsesForProductLineRelation = productlines.getProductsesForProductLineRelation();
        if(productsesForProductLine != null && Hibernate.isInitialized(productsesForProductLine)) {
            productsesForProductLine.forEach(_products -> _products.setProductlinesByProductLine(productlines));
        }
        if(productsesForProductLineRelation != null && Hibernate.isInitialized(productsesForProductLineRelation)) {
            productsesForProductLineRelation.forEach(_products -> _products.setProductlinesByProductLineRelation(productlines));
        }

        Productlines productlinesCreated = this.wmGenericDao.create(productlines);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(productlinesCreated);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Productlines getById(String productlinesId) {
        LOGGER.debug("Finding Productlines by id: {}", productlinesId);
        return this.wmGenericDao.findById(productlinesId);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Productlines findById(String productlinesId) {
        LOGGER.debug("Finding Productlines by id: {}", productlinesId);
        try {
            return this.wmGenericDao.findById(productlinesId);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Productlines found with id: {}", productlinesId, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public List<Productlines> findByMultipleIds(List<String> productlinesIds, boolean orderedReturn) {
        LOGGER.debug("Finding Productlines by ids: {}", productlinesIds);

        return this.wmGenericDao.findByMultipleIds(productlinesIds, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "classicmodelsTransactionManager")
    @Override
    public Productlines update(Productlines productlines) {
        LOGGER.debug("Updating Productlines with information: {}", productlines);

        List<Products> productsesForProductLine = productlines.getProductsesForProductLine();
        List<Products> productsesForProductLineRelation = productlines.getProductsesForProductLineRelation();
        if(productsesForProductLine != null && Hibernate.isInitialized(productsesForProductLine)) {
            productsesForProductLine.forEach(_products -> _products.setProductlinesByProductLine(productlines));
        }
        if(productsesForProductLineRelation != null && Hibernate.isInitialized(productsesForProductLineRelation)) {
            productsesForProductLineRelation.forEach(_products -> _products.setProductlinesByProductLineRelation(productlines));
        }

        this.wmGenericDao.update(productlines);
        this.wmGenericDao.refresh(productlines);

        return productlines;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
    public Productlines delete(String productlinesId) {
        LOGGER.debug("Deleting Productlines with id: {}", productlinesId);
        Productlines deleted = this.wmGenericDao.findById(productlinesId);
        if (deleted == null) {
            LOGGER.debug("No Productlines found with id: {}", productlinesId);
            throw new EntityNotFoundException(MessageResource.create("com.wavemaker.runtime.entity.not.found"), Productlines.class.getSimpleName(), productlinesId);
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "classicmodelsTransactionManager")
    @Override
    public void delete(Productlines productlines) {
        LOGGER.debug("Deleting Productlines with {}", productlines);
        this.wmGenericDao.delete(productlines);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Productlines> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Productlines");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Productlines> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Productlines");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service classicmodels for table Productlines to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service classicmodels for table Productlines to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Products> findAssociatedProductsesForProductLine(String productLine, Pageable pageable) {
        LOGGER.debug("Fetching all associated productsesForProductLine");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("productlinesByProductLine.productLine = '" + productLine + "'");

        return productsService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "classicmodelsTransactionManager")
    @Override
    public Page<Products> findAssociatedProductsesForProductLineRelation(String productLine, Pageable pageable) {
        LOGGER.debug("Fetching all associated productsesForProductLineRelation");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("productlinesByProductLineRelation.productLine = '" + productLine + "'");

        return productsService.findAll(queryBuilder.toString(), pageable);
    }

    /**
     * This setter method should only be used by unit tests
     *
     * @param service ProductsService instance
     */
    protected void setProductsService(ProductsService service) {
        this.productsService = service;
    }

}